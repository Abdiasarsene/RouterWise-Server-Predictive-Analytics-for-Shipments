# Importation des biblioth√®ques n√©cessaires
import mlflow
import bentoml
from .config import settings
from sklearn.metrics import accuracy_score, f1_score, recall_score

def log_and_save_models(best_models, x_test, y_test):
    """
    Fonction pour enregistrer les mod√®les dans MLflow et BentoML.
    
    :param best_models: Dictionnaire des meilleurs mod√®les entra√Æn√©s.
    :param x_test: Donn√©es de test pour √©valuer les mod√®les.
    :param y_test: Cibles de test pour √©valuer les mod√®les.
    """
    mlflow.set_experiment(settings.EXPERIMENT_NAME)
    
    for model_name, model in best_models.items():
        try:
            # Pr√©diction et calcul des m√©triques
            y_pred = model.predict(x_test)
            acc = accuracy_score(y_test, y_pred)
            f1 = f1_score(y_test, y_pred, average="weighted", zero_division=0)
            rec = recall_score(y_test, y_pred, average="weighted", zero_division=0)

            with mlflow.start_run(run_name=model_name):
                # Log des param√®tres et m√©triques dans MLflow
                mlflow.log_param('model_type', model_name)
                mlflow.log_params(model.get_params())
                mlflow.log_metric('accuracy', acc)
                mlflow.log_metric('f1_score', f1)
                mlflow.log_metric('recall', rec)

                # Enregistrement du mod√®le dans MLflow
                mlflow.sklearn.log_model(model, model_name)
                print(f"‚úÖ Mod√®le {model_name} enregistr√© avec MLflow.")

                # Enregistrement du mod√®le dans le Model Registry
                model_uri = f"run:/{mlflow.active_run().info.run_id}/{model_name}"
                result = mlflow.register_model(model_uri=model_uri, name=model_name)

                client = mlflow.tracking.MlflowClient()
                client.transition_model_version_stage(
                    name=model_name,
                    version=result.version,
                    stage="Production",
                    archive_existing_versions=True
                )
                print(f"üéØ {model_name} promu en Production dans le Model Registry.")

            # Enregistrement avec BentoML
            bentoml.sklearn.save_model(model_name, model)
            print(f"üíæ Mod√®le {model_name} sauvegard√© avec BentoML.")

        except Exception as e:
            print(f"‚ö†Ô∏è Erreur lors de l'enregistrement du mod√®le {model_name}: {e}")